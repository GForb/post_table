class BinaryVariable {
    double positive
    double n
    string percent
    string n_percent
    string summary 
} , inherit(Variable)

program .new
syntax varname, [label(passthru) decimal_places(passthru) percent_sign positive(integer 1)]
    .positive = `positive'
    .Super.new `varlist', `label' `decimal_places' `percent_sign'
end

program .calculate_stats
    .Super.calculate_stats // .Super.calculate_stats calls the .calculate_stats program from the parent class (Variable)
    .get_n_percent_positive
    .summary = "`.n_percent'"
end

program .get_n_percent_positive
    qui count if !missing(`.varname')
    local denominator = r(N)
    qui count if `.varname' == `.positive'
    local numerator = r(N)
    .output_n_percent `numerator' `denominator'
end

